import os
import re
import spacy
import random
from collections import defaultdict
from spacy.lang.fr.stop_words import STOP_WORDS
from collections import Counter

# Installation de spaCy si n√©cessaire
try:
    nlp = spacy.load("fr_core_news_md")
except:
    import subprocess
    subprocess.run(["python", "-m", "spacy", "download", "fr_core_news_md"])
    nlp = spacy.load("fr_core_news_md")

# Chemin vers le dossier contenant les notes Obsidian
NOTES_FOLDER = "/Users/sodaa/Documents/notes_zotero"

# Liste compl√®te des concepts existants
CONCEPTS_LIST = [
    "immanence", "biopolitique", "rhizome", "√©pist√©mologie", "ontologie",
    "capitalisme", "destitution", "r√©volution", "communisme", "affect", "affection", 
    "police", "soci√©t√©", "√©conomie", "√©meute", "forme", "institution", "insurrection", 
    "n√©olib√©ral", "peuple", "r√©el", "agencement", "anarchiste", "capital", "civilisation", 
    "langage", "classes", "conatus", "pulsion", "contr√¥le", "imitation", "corps", "d√©mocratie", 
    "d√©sir", "imagination", "individu", "joie", "justice", "l√©gitimit√©", "politique", 
    "populisme", "pouvoir", "puissance", "relation", "sabotage", "travail", "usage", "amour", 
    "artiste", "attentat", "autochtone", "autonome", "autre", "banlieue", "catastrophe", "commun", 
    "communaut√©", "communisme", "commune", "communication", "complot", "conflit", "consentement", 
    "contrainte", "critique", "cybern√©tique", "d√©sastre", "d√©terminisme", "dette", "division du travail", 
    "√©chelle", "espoir", "√©v√®nement", "√©tendue", "pens√©e", "fragmentation", "genre", "gouverner", 
    "h√©t√©ronomie", "horizontalit√©", "information", "ingouvernable", "libertaire", "liens", "masse", 
    "militant", "militer", "mobilisation", "obs√©quium", "imperium", "panoptique", "r√©publique", 
    "rencontre", "situation", "souverainet√©", "spectacle", "structure", "surveillance", "technologie", 
    "technique", "temps", "transindividuel", "utopie", "tristesse"
]

# Suggestions de concepts potentiels
suggested_concepts = defaultdict(int)

# Fonction pour nettoyer et extraire le contenu sans m√©tadonn√©es YAML
def extract_content(content):
    yaml_pattern = re.compile(r"^---\n(.*?)\n---", re.DOTALL)
    content = re.sub(yaml_pattern, "", content).strip()
    return content

# Fonction pour d√©tecter les concepts existants + sugg√©rer de nouveaux concepts
def detect_entities(text):
    doc = nlp(text)
    entities = {ent.text.lower() for ent in doc.ents if ent.label_ in ["PER", "ORG", "LOC", "MISC"]}

    # Recherche de concepts existants
    for concept in CONCEPTS_LIST:
        if re.search(rf"\b{re.escape(concept)}\b", text, re.IGNORECASE):
            entities.add(concept)

    # Identification de termes pertinents (enrichissement)
    keywords = [token.text.lower() for token in doc if token.is_alpha and token.text.lower() not in STOP_WORDS]
    keyword_freq = Counter(keywords)

    # Proposer les mots-cl√©s les plus r√©currents qui ne sont pas d√©j√† dans CONCEPTS_LIST
    for keyword, freq in keyword_freq.most_common(15):  # Top 15 mots-cl√©s
        if keyword not in CONCEPTS_LIST:
            suggested_concepts[keyword] += freq

    tags = [f"#Concept/{e}" if e in entities else f"#Concept/{e}" for e in entities]
    return tags

# Fonction principale : v√©rification sur 30 notes al√©atoires
def verify_concepts():
    note_samples = random.sample(
        [file for file in os.listdir(NOTES_FOLDER) if file.endswith(".md")], 30
    )

    with open(os.path.join(NOTES_FOLDER, "verif_concepts.md"), "w", encoding="utf-8") as f:
        f.write("# V√©rification des concepts d√©tect√©s\n\n")
        
        for file in note_samples:
            file_path = os.path.join(NOTES_FOLDER, file)
            with open(file_path, "r", encoding="utf-8") as f_read:
                content = f_read.read()

            text_content = extract_content(content)
            tags = detect_entities(text_content)

            f.write(f"**{file}** : {', '.join(tags) if tags else 'Aucun tag d√©tect√©'}\n")

            print(f"üîç V√©rification : {file} ‚Üí {', '.join(tags) if tags else 'Aucun tag d√©tect√©'}")

    print("\n‚úÖ Fichier de v√©rification cr√©√© : `verif_concepts.md`")

# Fonction pour ajouter les tags apr√®s validation
def add_tags_to_notes():
    for root, _, files in os.walk(NOTES_FOLDER):
        for file in files:
    
